#!/usr/bin/env python3

from builtin_interfaces.msg import Duration, Time
import rclpy
from rclpy.node import Node
from snp_msgs.srv import GenerateScanMotionPlan
from std_msgs.msg import Header
from trajectory_msgs.msg import JointTrajectoryPoint
import yaml


def create_point(point_val: dict,
                 time_offset: Duration = Duration()) -> JointTrajectoryPoint:
    point = JointTrajectoryPoint()
    point.positions = point_val['positions']
    point.velocities = point_val['velocities']
    point.accelerations = point_val['accelerations']
    point.effort = point_val['effort']

    sec = int(point_val['time_from_start']['sec']) - time_offset.sec
    nsec = int(point_val['time_from_start']['nanosec']) - time_offset.nanosec

    point.time_from_start = Duration(sec=sec, nanosec=nsec)
    return point


class ScanMotionPlanFromFileNode(Node):

    def __init__(self):
        super().__init__('scan_motion_plan_from_file')
        self.srv = self.create_service(GenerateScanMotionPlan, 'generate_scan_motion_plan', self.callback)
        self.declare_parameter('scan_trajectory_file', rclpy.Parameter.Type.STRING)

    def callback(self, request, response):
        try:
            with open(self.get_parameter('scan_trajectory_file').value, "r") as file_input:
                scan_traj = yaml.safe_load(file_input)

            points = scan_traj['points']

            header = Header()
            header.stamp = Time(sec=int(scan_traj['header']['stamp']['sec']),nanosec=int(scan_traj['header']['stamp']['nanosec']))
            header.frame_id = scan_traj['header']['frame_id']

            # Approach
            response.approach.header = header;
            response.approach.joint_names = scan_traj['joint_names']
            for i in range(0, 2):
              response.approach.points.append(create_point(points[i]))

            # Process
            response.process.header = header;
            response.process.joint_names = scan_traj['joint_names']
            for i in range(1, len(points) - 1):
                response.process.points.append(create_point(points[i], response.approach.points[-1].time_from_start))

            # Departure
            response.process.header = header;
            response.departure.joint_names = scan_traj['joint_names']
            for i in range(len(points) - 1, len(points)):
                response.departure.points.append(create_point(points[i], response.process.points[-1].time_from_start))

            response.success = True

        except Exception as e:
            response.success = False
            response.message = str(e)

        return response


def main(args=None):
    rclpy.init(args=args)
    rclpy.spin(ScanMotionPlanFromFileNode())
    rclpy.shutdown()


if __name__ == '__main__':
    main()
